------------------------------------------------
-- IDS FIT BIT 2 BIB
-- Michal Vaško xvasko14
-- Martin Vaško xvasko12
------------------------------------------------
DROP TABLE Osoba CASCADE CONSTRAINTS;
DROP TABLE Studijny_program CASCADE CONSTRAINTS;
DROP TABLE Pravidlo CASCADE CONSTRAINTS;
DROP TABLE Predmet CASCADE CONSTRAINTS;
DROP TABLE Prihlasuje CASCADE CONSTRAINTS;
DROP TABLE Student CASCADE CONSTRAINTS;
DROP TABLE Zamestnanec CASCADE CONSTRAINTS;

DROP SEQUENCE countID;

alter session set nls_date_format = 'yyyy';

CREATE TABLE Pravidlo (
id_pravidla NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
Pocet_kreditov INTEGER,
Max_Pocet_registracii INTEGER,
Rocny_Kreditovy_strop INTEGER UNIQUE
); 
-- N to N subtable.
CREATE TABLE Prihlasuje (
Login CHAR(8) NOT NULL,
Skratka_predmetu CHAR(3) NOT NULL,
Ak_rok DATE NOT NULL
);

CREATE TABLE Osoba (
Login  CHAR(8) PRIMARY KEY,
Meno VARCHAR(80) UNIQUE

); 
-- Student specializuje osobu, je v osobitnej tabulke kvoli konfliktom so zamestnancom.
-- Zamestnanec uz nestuduje (iba ak doktorand), a takyto pripad riesi ze je v 2 tabulkach naraz.
-- Kedze ER diagram sa zle zviazal (Osoba - St. program) tak sme pre studenta vytvorili nasledujuce atributy,
-- aby sme ho mohli previazat so St. programom a osobu previazat iba s registraciou / vyukou predmetov
CREATE TABLE Student (
Login CHAR(8) PRIMARY KEY,
Rocnik INTEGER CHECK (Rocnik > 0 and Rocnik <= 6),
Semester INTEGER CHECK (Semester > 0 and Semester <= 12),
Skratka_programu VARCHAR (3),
Ak_rok DATE NOT NULL,
FOREIGN KEY (Login) REFERENCES Osoba(Login)
);
-- Specializacia zahrnuta z ER diagramu
CREATE TABLE Zamestnanec (
Login CHAR (8) PRIMARY KEY,
Pracuje_pre_ustav VARCHAR (10) NOT NULL,
Vyucuje NUMBER(1,0) NOT NULL ,
FOREIGN KEY (Login) REFERENCES Osoba(Login)
);

-- N k N vazba bola zle St. program ma iba 1 pravidlo, ktore si moze v pripade
-- problemov zmenit na ine pravidlo / upravit pravidlo.
CREATE TABLE Studijny_program (
Skratka_programu VARCHAR(3),
Typ_studia VARCHAR(20),
Odbor VARCHAR(30),
Ak_rok DATE NOT NULL,
Doba_studia INTEGER NOT NULL,
Forma_studia VARCHAR(20),
Cislo_pravidla INTEGER,
FOREIGN KEY(Cislo_pravidla) REFERENCES pravidlo(id_pravidla)
); 


ALTER TABLE Studijny_program ADD CONSTRAINT pk_Studijny_program PRIMARY KEY (Ak_rok,Skratka_programu);
ALTER TABLE Student ADD CONSTRAINT fk_Program FOREIGN KEY (Ak_rok,Skratka_programu) REFERENCES Studijny_program(Ak_rok,Skratka_programu);

-- pribudol Ak rok kvoli referencii na studijny program
CREATE TABLE Predmet (
Skratka_predmetu CHAR(3),
Ak_rok DATE NOT NULL,
Nazov VARCHAR(40) NOT NULL,
Typ VARCHAR(3) NOT NULL,
Obsadenost INTEGER NOT NULL,
Ukoncenie_predmetu VARCHAR(5) NOT NULL,
Fakulta VARCHAR(40) NOT NULL,
Limit_prihlasenych INTEGER,
Skratka_programu VARCHAR(3),
Pocet_kreditov INTEGER CHECK (Pocet_kreditov >0),
PRIMARY KEY (Ak_rok, Skratka_predmetu),
FOREIGN KEY (Ak_rok,Skratka_programu) REFERENCES Studijny_program (Ak_rok,Skratka_programu)
); 

ALTER TABLE Prihlasuje ADD CONSTRAINT fk_Predmet FOREIGN KEY (Ak_rok,Skratka_predmetu) REFERENCES Predmet(Ak_rok,Skratka_predmetu);
ALTER TABLE Prihlasuje ADD CONSTRAINT fk_Osoba FOREIGN KEY (Login) REFERENCES Osoba(Login);

---------- TRIGER autincrement ID --------
CREATE SEQUENCE countID;
ALTER session SET nls_date_format ='dd.mm.yyyy';
CREATE OR REPLACE TRIGGER autoincrement
  BEFORE INSERT ON Pravidlo
  FOR EACH ROW
BEGIN
  :new.id_pravidla := countID.nextval;
END autoincrement;
/
show errors
--------- TRIGER check limit ci je mensi alebo rovny ako obsadenost predmetu
CREATE OR REPLACE TRIGGER trigger_check_limit
  BEFORE Insert OR UPDATE ON Predmet
  FOR EACH ROW
DECLARE 
  limitP Predmet.Limit_prihlasenych%TYPE;
  obsadenost Predmet.Obsadenost%TYPE;
BEGIN
  limitP := :NEW.Limit_prihlasenych;
  obsadenost := :NEW.Obsadenost;
  IF (limitP < obsadenost)THEN
    Raise_Application_Error(-20599,'Limit bol prekroceny, skuste iny predmet!');
  END IF;
END trigger_check_limit;
/
show errors
---------------------------------------------
---------- Procedura na increment obsadenosti 
---------------------------------------------
SET serveroutput ON;
create or replace PROCEDURE checkObsadenost( predmetI IN Prihlasuje.Skratka_predmetu%TYPE,
  Ak_rok IN Prihlasuje.Ak_rok%TYPE)
  IS
  cursor predmetC is select * from Predmet;
  obsah Predmet.Skratka_predmetu%TYPE;
  obsadenost Predmet.Obsadenost%TYPE;
BEGIN
  obsadenost := 0;
  SELECT Obsadenost into obsadenost FROM Predmet 
  WHERE predmetI = Predmet.Skratka_predmetu AND Ak_rok = Predmet.Ak_rok;
  update Predmet set Obsadenost = obsadenost + 1 where predmetI = Predmet.Skratka_predmetu AND Ak_rok = Predmet.Ak_rok;
END;
/
show errors
--------- TRIGER na increment obsadenosti pri pridani prihlasenia k predmetu --
CREATE OR REPLACE TRIGGER trigger_increment_obsadenost
  AFTER INSERT OR UPDATE ON Prihlasuje
  FOR EACH ROW
DECLARE
  predmetP Prihlasuje.Skratka_predmetu%TYPE;
  Ak_rok Prihlasuje.Ak_rok%TYPE;
BEGIN
  predmetP := :new.Skratka_predmetu;
  Ak_rok := :new.Ak_rok;
  checkObsadenost(predmetP, Ak_rok);
END tirgger_increment_obsadenost;
/
show errors

---------- TRIGER login check ----------
ALTER session SET nls_date_format = 'dd.mm.yyyy';
CREATE OR REPLACE TRIGGER trigger_check_login
  BEFORE INSERT OR UPDATE ON Osoba
  FOR EACH ROW
DECLARE
  login Osoba.Login%TYPE;
  num VARCHAR2(2);
  name VARCHAR2(6);
BEGIN
  login := :NEW.Login;
  name := substr (login,1,6);
  num := substr (login,7,8);
  IF ( LENGTH(login) != 8) THEN
    Raise_Application_Error(-20003,'Malo znakov pre login!');
  END IF;
  IF ( LENGTH(TRIM(TRANSLATE(login, 'abcdefghijklmnopqrstuvxyz', ' '))) != null) THEN
    Raise_Application_Error(-20004,'Nespravny format login!');
  END IF;
  IF (LENGTH(TRIM(TRANSLATE(num, '0123456789', ' '))) != null) THEN
    Raise_Application_Error(-20005,'Nespravny format cisla za login!');
  END IF;
END trigger_check_login;
/
show errors
ALTER session SET nls_date_format = 'dd.mm.yyyy';

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
--------- Procedury -----------------------------------------------------------
-------------------------------------------------------------------------------
-- procedura na zistenie percentualneho podielu  studentov s poctom kreditov 
-- z predmetov rovno alebo viac ako parameter in `pocetKreditov`.
-------------------------------------------------------------------------------
ALTER session SET nls_date_format='dd.mm.yyyy';
SET serveroutput ON;
create or replace PROCEDURE zisti_pomer( 
  pocetKreditov IN NUMBER)
  IS
  cursor kredit is select * from Predmet natural join Prihlasuje;
  polozkaObsah kredit%ROWTYPE;
  maxKredit Predmet.Pocet_kreditov%TYPE;
  studentName Prihlasuje.Login%TYPE;
  countMore NUMBER;
  allStudents NUMBER;
BEGIN
  countMore := 0;
  allStudents := 0;
  studentName := '';
  open kredit;
  loop
    fetch kredit into polozkaObsah;
    exit when kredit%NOTFOUND;
    SELECT SUM(Predmet.Pocet_kreditov) INTO maxKredit FROM
    Prihlasuje,Predmet,Student WHERE
    Prihlasuje.Skratka_predmetu=Predmet.Skratka_predmetu
    AND Prihlasuje.Ak_rok=Predmet.Ak_rok AND Student.Login = Prihlasuje.Login
    AND polozkaObsah.Login = Student.Login GROUP BY Prihlasuje.Login;

    if (studentName != polozkaObsah.Login) THEN
      studentName := polozkaObsah.Login;
      allStudents := allStudents + 1;
      if (pocetKreditov <= maxKredit) THEN
        countMore := countMore + 1; 
      END IF;
    END IF;
  end loop;
  dbms_output.put_line('Studenti s poctom kreditov viac ako ' || pocetKreditov || ' ma percentualne zastupenie: ' || (countMore * 100)/(allStudents) || '%');
  EXCEPTION
    WHEN ZERO_DIVIDE THEN
      dbms_output.put_line('Studenti s poctom kreditov viac ako ' || pocetKreditov || 'ma percentuale zastupenie 0%');
    WHEN OTHERS THEN
      Raise_Application_Error(-20675,'Error occured!');
END;
/
-------------------------------------------------------------
--- Procedura na zistenie spoluziakov vramci rocika ---------
--- 1. parameter IN meno ziaka ------------------------------
-------------------------------------------------------------
ALTER session SET nls_date_format='dd.mm.yyyy';
SET serveroutput ON;
create or replace PROCEDURE zisti_spoluziaka(menoZiaka IN Student.Login%TYPE)
  IS
  cursor polozka is select * from Studijny_program natural join Student;
  polozkaObsah polozka%ROWTYPE;
  studentR Student.Rocnik%TYPE;
  studentProg Student.Skratka_programu%TYPE;
  studentMeno Student.Login%TYPE;
  pocet NUMBER;
BEGIN
  pocet := 0;
  SELECT Rocnik INTO studentR FROM Student WHERE menoZiaka = Student.Login;
  SELECT Skratka_programu INTO studentProg FROM Student Where Student.Login = menoZiaka; 
  open polozka;
  dbms_output.put_line('v Studijnom programe ' ||studentProg|| ' ma ' ||menoZiaka|| ' tychto spoluziakov: ' );
  loop
    fetch polozka into polozkaObsah;
    exit when polozka%NOTFOUND;
    IF (polozkaObsah.Login != menoZiaka) THEN
      IF (polozkaObsah.Skratka_programu = studentProg) THEN
        IF (polozkaObsah.Rocnik = studentR) THEN
          dbms_output.put_line(''||polozkaObsah.Login|| ', ');
          pocet := pocet + 1;
        END IF;
      END IF;
    END IF;
  END loop;
  dbms_output.put_line('Spolu: ' || pocet|| '');
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    dbms_output.put_line('Student s loginom ' ||menoZiaka||' neexistuje!');
  WHEN OTHERS THEN
    Raise_Application_Error(-20206,'Nastala chyba!');
END;
/
ALTER session SET nls_date_format='yyyy';
-----------------------------------------------------------------------------
-------------------------- INSERTY do tabuliek ------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------


INSERT INTO Pravidlo
VALUES(1,180,2,30);
INSERT INTO Pravidlo
VALUES(2,60,1,70);
INSERT INTO Pravidlo
VALUES(3,120,3,75);
INSERT INTO Pravidlo
VALUES(4,130,3,80);

--integritne pravidla --
INSERT INTO Studijny_program
VALUES('BIT','Bakalarsky','Informatika','2016',3,'prezenèná',1);
INSERT INTO Studijny_program
VALUES('BGR','Bakalarsky','Grafika','2017',3,'prezenèná',1);
INSERT INTO Studijny_program
VALUES('BIT','Bakalarsky','Informatika','2017',3,'externá',2);
INSERT INTO Studijny_program
VALUES('BIT','Bakalarsky','Bioinfromatika','2015',2,'prezenèná',3);
INSERT INTO Studijny_program
VALUES('MBI','Magistersky','Bioinfromatika','2015',2,'prezenèná',3);
INSERT INTO Studijny_program
VALUES('MBE','Magistersky','Bezpeènos?','2014',2,'prezenèná',4);

INSERT INTO Osoba
VALUES('xvasko14','Michal Vaško');
INSERT INTO Osoba
VALUES('xvasko12','Martin Vaško');
INSERT INTO Osoba
VALUES('xtamas01','Marek Tamaškoviè');
INSERT INTO Osoba
VALUES('vesely','Vladimir Veselý');
INSERT INTO Osoba
VALUES('ikanich','Vlasta Kanich');
INSERT INTO Osoba
VALUES('smrcka','Ales Smrcka');
INSERT INTO Osoba
VALUES('vojnar','Tomas Vojnar');
INSERT INTO Osoba
VALUES('xkiska01','Andrej Kiska');
INSERT INTO Osoba
VALUES('xronal07','Cristiano Ronaldo');
INSERT INTO Osoba
VALUES('xpotte02','Harry Potter');
INSERT INTO Osoba
VALUES('xmessi03','Lionel Messi');
INSERT INTO Osoba
VALUES('xpasty09','Jozef Pastyrik');

INSERT INTO Student
VALUES('xvasko14',2,4, 'BIT','2016');
INSERT INTO Student
VALUES('xvasko12',1,2,'BGR', '2017');
INSERT INTO Student
VALUES('xtamas01',2,4, 'BIT' , '2016');
INSERT INTO Student
VALUES('xkiska01',3,4, 'BIT', '2015');
INSERT INTO Student
VALUES('xronal07',2,4, 'BIT', '2017');
INSERT INTO Student
VALUES('xpotte02',2,4, 'BGR', '2017');
INSERT INTO Student
VALUES('xmessi03',2,4, 'BIT', '2017');
INSERT INTO Student
VALUES('xpasty09',2,4, 'BGR', '2017');
INSERT INTO Student
VALUES('ikanich',2,4,'MBI', '2015');


INSERT INTO Zamestnanec
VALUES('vesely', 'UPS', 1);
INSERT INTO Zamestnanec
VALUES('ikanich', 'UPGM', 0);
INSERT INTO Zamestnanec
VALUES('smrcka', 'UVF', 1);
INSERT INTO Zamestnanec
VALUES('vojnar', 'UVF', 1);

INSERT INTO Predmet
VALUES('IDS','2017','Databázové systémy','P',592,'ZaZk','FIT',600, 'BIT',5);
INSERT INTO Predmet
VALUES('ITY','2017','Typografia','V',350,'KlZa','FIT', 600, 'BGR',4);
INSERT INTO Predmet
VALUES('IOS','2016','Operaèné systémy','P',420,'ZaZk','FIT',600, 'BIT',6);
INSERT INTO Predmet
VALUES('IFJ','2016','Formálne jazyky','P',410,'ZaZk','FIT',600, 'BIT',5);
INSERT INTO Predmet
VALUES('IPP','2017','00P','P',420,'Zk','FIT',600, 'BIT',7);
INSERT INTO Predmet
VALUES('IAL','2016','Algoritmy','P',420,'ZaZk','FIT',600, 'BIT',5);


INSERT INTO Prihlasuje
VALUES('xvasko12', 'IDS', '2017');
INSERT INTO Prihlasuje
VALUES('xvasko12', 'ITY', '2017');
INSERT INTO Prihlasuje
VALUES('xvasko12', 'IOS', '2016');
INSERT INTO Prihlasuje
VALUES('xvasko14', 'IDS', '2017');
INSERT INTO Prihlasuje
VALUES('xvasko14', 'IFJ', '2016');
INSERT INTO Prihlasuje
VALUES('xtamas01', 'IDS' , '2017');
INSERT INTO Prihlasuje
VALUES('xtamas01', 'IPP' , '2017');
INSERT INTO Prihlasuje
VALUES('xkiska01', 'IDS', '2017');
INSERT INTO Prihlasuje
VALUES('xronal07', 'IDS', '2017');
INSERT INTO Prihlasuje
VALUES('xpotte02', 'IDS', '2017');
INSERT INTO Prihlasuje
VALUES('xmessi03','IDS', '2017');
INSERT INTO Prihlasuje
VALUES('xpasty09','IDS', '2017');

--------------------------
-- Vyber vsetkych studentov a ich registrovane predmety
-- 2 TABLES
----------------------------
SELECT
Prihlasuje.Login, Predmet.Ak_rok, Predmet.Skratka_predmetu
FROM
Predmet, Prihlasuje
WHERE
Prihlasuje.Skratka_predmetu = Predmet.Skratka_predmetu
ORDER BY
Prihlasuje.Login;

------------------------------
--Vyber studentov na zaklade toho v akom akademickom roku studuju 
--2 TABLES
------------------------------
SELECT
Student.Login, Student.Ak_rok
FROM
Student,Studijny_program
WHERE
Studijny_program.Ak_rok = Student.Ak_rok
AND
Studijny_program.Skratka_programu = Student.Skratka_programu
ORDER BY
Studijny_program.Ak_rok;
------------------------------------------------
---Vypise rocny kreditovy limit na studenta podla odboru
-- 3 TABLES
---------------------------------------------------------------
SELECT Student.Login, Studijny_program.Odbor, Pravidlo.pocet_kreditov 
FROM
Student,Studijny_program,Pravidlo
WHERE
Studijny_program.Cislo_pravidla= Pravidlo.id_pravidla
AND
Student.Ak_rok=Studijny_program.Ak_rok
AND
Student.Skratka_programu = Studijny_program.Skratka_programu
ORDER BY 
Student.Login;
--------------------------------
--- Vyberie kolko predmetov ma aky typ predmetu(Volitelny alebo Povinny) 
--- Agregacna funkcia COUNT
--- GROUB BY
--------------------------------
SELECT
  COUNT (Predmet.nazov), Predmet.Typ
FROM
  Predmet
GROUP BY
  Predmet.Typ;
  
---------------------------------------
-- Sucet kreditov prihlasenych predmetov
-- GROUP BY
-- Agregacnu SUM
------------------------------------------

SELECT 
Prihlasuje.Login, SUM(Predmet.Pocet_kreditov)
FROM
Prihlasuje,Predmet,Student
WHERE
Prihlasuje.Skratka_predmetu=Predmet.Skratka_predmetu
AND
Prihlasuje.Ak_rok=Predmet.Ak_rok
AND
Student.Login = Prihlasuje.Login
GROUP BY
Prihlasuje.Login;

------------------------------------
-- Vytiahnem od studentov skratky programu napr(BIT,BGR) ktore obsahuju aj predmety
-- EXIST
------------------------------------------------

SELECT
Student.Login,Student.Skratka_programu
FROM 
Student
WHERE EXISTS (
 SELECT *
 FROM Predmet
 WHERE Student.Skratka_programu=Predmet.Skratka_programu
);

-----------------------------------------------
--- Vytiahni z predmetov predmet ktory ma ukoncenie na zaklade ZaZk
--- IN STATEMENT
-----------------------------------------------
SELECT
  Predmet.Skratka_predmetu, Predmet.Ak_rok, Predmet.Nazov, Predmet.Ukoncenie_predmetu
FROM
  Predmet
WHERE
  Predmet.Ukoncenie_predmetu IN (
    SELECT 
      Predmet.Ukoncenie_predmetu
    FROM
      Predmet
    WHERE
      Predmet.Ukoncenie_predmetu = 'ZaZk'
  );

------------ PLAN na materializovany pohlad -----------------------------------
-------------------------------------------------------------------------------
EXPLAIN PLAN FOR 
select Osoba.meno, count(Osoba.meno)
from Osoba 
GROUP BY Osoba.meno;

SELECT * FROM TABLE(DBMS_XPLAN.display);


------------- Commit transakcie ------------------------------------------------
commit;
------------- Zavolani procedur ------------------------------------------------
exec zisti_pomer(60);
exec zisti_pomer(14);
----- bez spoluziaka
exec zisti_spoluziaka('xvasko12');
----- so spoluziakmi
exec zisti_spoluziaka('xvasko14');
exec zisti_spoluziaka('xlind01');
--------------------------------------------------------------------------------
------------- EXPLAIN PLAN pre SQL dotaz s 3 tab. agregacnou funkciou a GROUP BY
--------------------------------------------------------------------------------
EXPLAIN PLAN FOR 
SELECT 
Prihlasuje.Login, SUM(Predmet.Pocet_kreditov)
FROM
Prihlasuje,Predmet,Student
WHERE
Prihlasuje.Skratka_predmetu=Predmet.Skratka_predmetu
AND
Prihlasuje.Ak_rok=Predmet.Ak_rok
AND
Student.Login = Prihlasuje.Login
GROUP BY
Prihlasuje.Login;

SELECT plan_table_output
  FROM table(dbms_xplan.display());
  
CREATE INDEX indexExplain ON Prihlasuje (Login);
  
EXPLAIN PLAN FOR
SELECT /*+ INDEX(Prihlasuje indexExplain)*/ SUM(Predmet.Pocet_kreditov)
FROM
Prihlasuje,Predmet,Student
WHERE
Prihlasuje.Skratka_predmetu=Predmet.Skratka_predmetu
AND
Prihlasuje.Ak_rok=Predmet.Ak_rok
AND
Student.Login = Prihlasuje.Login
GROUP BY
Prihlasuje.Login;
SELECT * FROM TABLE(DBMS_XPLAN.display);

------------------------------------
------- udelenie prav xvasko12 -----
------------------------------------
GRANT ALL ON Student TO xvasko12;
GRANT ALL ON Prihlasuje TO xvasko12;
GRANT ALL ON Studijny_program TO xvasko12;
GRANT ALL ON Pravidlo TO xvasko12;
GRANT ALL ON Osoba TO xvasko12;
GRANT ALL ON Zamestnanec TO xvasko12;

GRANT EXECUTE ON zisti_pomer TO xvasko12;

------------------------------------------------------------------
-- Materialized view created -------------------------------------
------------------------------------------------------------------
DROP materialized view pohled_database;

create materialized view log on Osoba with PRIMARY KEY,rowid(meno)  INCLUDING NEW VALUES; 

create materialized view pohled_database
  nologging
  cache
  build immediate
  refresh fast on commit
  enable query rewrite
  as
  select Osoba.meno, count(Osoba.meno)
  from Osoba 
  GROUP BY Osoba.meno;

GRANT ALL ON pohled_database TO xvasko12;


INSERT INTO Osoba VALUES('xlucin14','Lucina Miroslav');
COMMIT;

EXPLAIN PLAN FOR
SELECT * from pohled_database;
SELECT * FROM TABLE(DBMS_XPLAN.display);


